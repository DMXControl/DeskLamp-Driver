pipeline {
	options {
		buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '10'))
		disableConcurrentBuilds()
		disableResume()
		copyArtifactPermission('');
	}
	agent {
		node{
			label 'Win10'
		}
	}	
	environment {
		//  Define the VisualStudio tools
		MSBuild = tool 'MSBuild VS 2019'
		VSTestConsole = tool 'VSTest VS 2019'
		
		//  Define the additional tools
		SZip = tool '7Zip_current'
		WGET = tool 'WGet_current'
		CLOC = tool 'CLOC_current'
		OpenCover = tool 'OpenCover_current'
		ReportGenerator = tool 'ReportGenerator_current'
		commitHash = bat (returnStdout: true, script: "@git log -n 1 --pretty=format:%%H").trim()
	}
	stages{
		stage('Count Lines of Code'){
			steps {
				//  Run the tool to count the code lines
				bat "\"${CLOC}\" --by-file --xml --out=CountLinesOfCode/CLOCReport.xml --exclude-dir=Dependencies --include-lang=C# ."
			}
		}
		stage('Update Nuget Packages'){
			steps {
				//  First, update all nuget packages in the branch
				bat 'nuget restore DeskLamp.sln'
			}
		}
		stage('Build Debug Configuration'){
			steps {
				echo "Git Commit Hash is ${commitHash}"
				echo "Build Number is ${env.BUILD_NUMBER}"
				
				// Build the current branch in debug mode
				bat "\"${MSBuild}\" DeskLamp.sln /p:Configuration=Debug /t:Clean;Rebuild /p:Platform=\"Any CPU\" "
			}
		}
		stage('Build Release Configuration'){
			steps {
				script {
					//  Build the release configuration of the current branch
					bat "\"${MSBuild}\" DeskLamp.sln /p:Configuration=Release /p:DefineConstants=\"JENKINS\" /t:Clean;Rebuild /p:Platform=\"Any CPU\" "
				}
			}
		}
		stage('Pack and Publish NuGet Package Internally'){
			when { not {buildingTag() } }
			steps {
				script {
					//  Run the NuGet Publisher Worker Job to pack and publish the artifacts
					build job:'_worker-NuGet-Publisher', parameters: [
						string(name: 'WS_PATH', value: "${WORKSPACE}"),
						string(name: 'PRJ_FILE', value: "DeskLamp.csproj" ),
						[$class: 'NodeParameterValue', name: 'BUILD_NODE', labels: ["${env.NODE_NAME}"], nodeEligibility: [$class: 'AllNodeEligibility']]]
				}
			}
		}
		stage('Pack and Publish Package on Public NuGet'){
			when { buildingTag() }
			steps {
				script {
					//  Run the NuGet Publisher Worker Job to pack and publish the artifacts (only, if this build is tagged)
					build job:'_worker-NuGet-Publisher', parameters: [
						string(name: 'WS_PATH', value: "${WORKSPACE}"),
						string(name: 'PRJ_FILE', value: "DeskLamp.csproj" ),
						booleanParam(name: 'USE_DMXC_NUGET', value: false),
						[$class: 'NodeParameterValue', name: 'BUILD_NODE', labels: ["${env.NODE_NAME}"], nodeEligibility: [$class: 'AllNodeEligibility']]]
				}
			}
		}
	}
	post {
		always {
			// Publish the CLOC report and msBuild issues
			sloccountPublish encoding: 'UTF-8', pattern: 'CountLinesOfCode/CLOCReport.xml'
			
			recordIssues tool: msBuild()
		}
		success {
			//  Run the post build processes only, if the build was a success because the the following steps need the output of the jobs so far
			recordIssues tool: taskScanner(highTags:'FIXME', normalTags:'TODO', includePattern: '**/*.cs', IgnoreCase: true)
		
			archiveArtifacts artifacts: 'bin/Release/DeskLamp.exe', fingerprint: true
		}
	}
}